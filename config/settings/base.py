"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
import sys
from pathlib import Path
from typing import Any

import dj_database_url
import environ
import sentry_sdk
from dbt_copilot_python.database import database_url_from_env
from dbt_copilot_python.network import is_copilot, setup_allowed_hosts
from django.urls import reverse_lazy
from sentry_sdk import set_tag
from sentry_sdk.integrations.django import DjangoIntegration
from sentry_sdk.integrations.redis import RedisIntegration

from config.asim_formatter import DDASIMFormatter


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR: Path = Path(__file__).resolve().parent.parent.parent
env: environ.Env = environ.Env()
environ.Env.read_env(BASE_DIR / ".env")


ENABLE_DEBUGPY = env.bool("ENABLE_DEBUGPY", False)

# App
#
APP_ENV: str = env.str("APP_ENV")
INFRA_SERVICE: str = env.str("INFRA_SERVICE", "MAIN")
GIT_COMMIT: str = env.str("GIT_COMMIT", None)
HOST_ALL_APIS = env.bool("HOST_ALL_APIS", default=False)

# Boto
S3_LOCAL_ENDPOINT_URL = env.str("S3_LOCAL_ENDPOINT_URL", default=None)
DATA_FLOW_UPLOADS_BUCKET = env.str("DATA_FLOW_UPLOADS_BUCKET", None)
DATA_FLOW_UPLOADS_BUCKET_PATH = env.str("DATA_FLOW_UPLOADS_BUCKET_PATH", None)
DATA_FLOW_USERS_DIRECTORY = env.str("DATA_FLOW_USERS_DIRECTORY", None)

# Django
# https://docs.djangoproject.com/en/5.1/topics/settings/
SECRET_KEY: str = env.str("SECRET_KEY")
DEBUG: bool = False
ALLOWED_HOSTS: list[str] = setup_allowed_hosts(env.list("ALLOWED_HOSTS", default=[]))
ROOT_URLCONF: str = "config.urls"
WSGI_APPLICATION: str = "config.wsgi.application"

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL: str = "static/"
STATIC_ROOT: Path = BASE_DIR / "staticfiles"
STATICFILES_DIRS: list[Path] = [
    BASE_DIR / "frontend" / "dist",
]

# Storage
# https://docs.djangoproject.com/en/5.1/ref/settings/#storages

STORAGES: dict[str, Any] = {
    "default": {
        "BACKEND": "django.core.files.storage.FileSystemStorage",
    },
    # WhiteNoise
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}

# Vite
# https://vitejs.dev/guide/backend-integration.html
VITE_DEV: bool = env.bool("VITE_DEV")
VITE_DEV_SERVER_URL: str = env.str("VITE_DEV_SERVER_URL")
VITE_MANIFEST_PATH: Path = BASE_DIR / "frontend" / "dist" / "manifest.json"

DJANGO_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.postgres",
]

THIRD_PARTY_APPS = [
    "authbroker_client",
    "django_chunk_upload_handlers",
    "simple_history",
]

LOCAL_APPS = [
    "pingdom.apps.PingdomConfig",
    "user.apps.UserConfig",
    "profiles.apps.ProfileConfig",
    "core.apps.CoreConfig",
]

# Application definition
INSTALLED_APPS: list[str] = LOCAL_APPS + THIRD_PARTY_APPS + DJANGO_APPS

MIDDLEWARE: list[str] = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

if INFRA_SERVICE == "MAIN":
    MIDDLEWARE.append(
        "authbroker_client.middleware.ProtectAllViewsMiddleware",
    )

# Keep the order of Middleware, history is last.
MIDDLEWARE.append(
    "simple_history.middleware.HistoryRequestMiddleware",
)

TEMPLATES: list[dict[str, Any]] = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
    "user.backends.IdentityAuthbrokerBackend",
]


LOGIN_URL = reverse_lazy("authbroker_client:login")
LOGIN_REDIRECT_URL = "/"


# authbroker config for SSO user oAuth
AUTHBROKER_URL = env("AUTHBROKER_URL")
AUTHBROKER_CLIENT_ID = env("AUTHBROKER_CLIENT_ID")
AUTHBROKER_CLIENT_SECRET = env("AUTHBROKER_CLIENT_SECRET")
AUTHBROKER_STAFF_SSO_SCOPE = env("AUTHBROKER_STAFF_SSO_SCOPE")
AUTHBROKER_ANONYMOUS_PATHS = (
    "/pingdom/ping.xml",
    "/api",
)
AUTH_USER_MODEL = "user.User"

# Hawk API auth setup
DJANGO_HAWK = {
    "HAWK_INCOMING_ACCESS_KEY": env(f"{INFRA_SERVICE}_HAWK_ID", None),
    "HAWK_INCOMING_SECRET_KEY": env(f"{INFRA_SERVICE}_HAWK_KEY", None),
}


LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "asim_formatter": {
            "()": DDASIMFormatter,
        },
        "simple": {
            "format": "{asctime} {levelname} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "asim": {
            "class": "logging.StreamHandler",
            "formatter": "asim_formatter",
            # "filters": ["request_id_context"],
        },
        "simple": {
            "class": "logging.StreamHandler",
            "formatter": "simple",
        },
        "stdout": {
            "class": "logging.StreamHandler",
            "formatter": "asim_formatter",
            "stream": sys.stdout,
        },
    },
    "root": {
        "handlers": ["stdout"],
        "level": os.getenv("ROOT_LOG_LEVEL", "INFO"),
    },
    "loggers": {
        "django": {
            "handlers": [
                "asim",
            ],
            "level": os.getenv("DJANGO_LOG_LEVEL", "INFO"),
            "propagate": False,
        },
        "django.request": {
            "handlers": [
                "asim",
            ],
            "level": os.getenv("DJANGO_LOG_LEVEL", "INFO"),
            "propagate": False,
        },
        "django.server": {
            "handlers": [
                "stdout",
            ],
            "level": os.getenv("DJANGO_SERVER_LOG_LEVEL", "INFO"),
            "propagate": False,
        },
        "django.db.backends": {
            "handlers": [
                "stdout",
            ],
            "level": os.getenv("DJANGO_DB_LOG_LEVEL", "INFO"),
            "propagate": False,
        },
        "requestlogs": {
            "handlers": [
                "asim",
            ],
            "level": os.getenv("DJANGO_LOG_LEVEL", "INFO"),
            "propagate": False,
        },
        "ddtrace": {
            "handlers": ["asim"],
            "level": "DEBUG",
            "propagate": False,
        },
        "mohawk": {
            "handlers": [
                "asim",
            ],
            "level": os.getenv("DJANGO_LOG_LEVEL", "WARNING"),
            "propagate": False,
        },
    },
    # "filters": {
    #     "request_id_context": {
    #         "()": "requestlogs.logging.RequestIdContext",
    #     },
    # },
}

# Sentry
# https://docs.sentry.io/platforms/python/integrations/django/
SENTRY_DSN: str = env.str("SENTRY_DSN")

if SENTRY_DSN:
    sentry_sdk.init(
        dsn=SENTRY_DSN,
        environment=APP_ENV,
        release=GIT_COMMIT,
        integrations=[DjangoIntegration(), RedisIntegration()],
        enable_tracing=env.bool("SENTRY_ENABLE_TRACING", False),
        traces_sample_rate=env.float("SENTRY_TRACES_SAMPLE_RATE", 0.0),
        send_default_pii=True,
    )
    set_tag("infra-service", INFRA_SERVICE)


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

if is_copilot():
    DATABASES: dict[str, Any] = {
        "default": dj_database_url.config(
            default=database_url_from_env("DATABASE_CREDENTIALS")
        )
    }
else:
    DATABASE_URL: str = env.str("DATABASE_URL")
    DATABASES = {"default": env.db()}

# Redis
# https://docs.djangoproject.com/en/5.1/topics/cache/
IDENTITY_REDIS_URL: str = env.str("IDENTITY_REDIS_URL", None)
IDENTITY_REDIS: str = env.str("IDENTITY_REDIS", None)

if is_copilot():
    IDENTITY_REDIS_URL = IDENTITY_REDIS_URL
else:
    IDENTITY_REDIS_URL = IDENTITY_REDIS

# Disabled as Ninja calls shouldn't be cached.
CACHES: dict[str, Any] = {
    "default": {
        "BACKEND": "django.core.cache.backends.redis.RedisCache",
        "LOCATION": IDENTITY_REDIS_URL,
        "KEY_PREFIX": "identity_",
    }
}

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/
LANGUAGE_CODE: str = "en-gb"
TIME_ZONE: str = "UTC"
USE_I18N: bool = True
USE_TZ: bool = True

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD: str = "django.db.models.BigAutoField"

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS: list[dict[str, str]] = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


CLAM_AV_USERNAME = env.str("CLAM_AV_USERNAME", default=None)
CLAM_AV_PASSWORD = env.str("CLAM_AV_PASSWORD", default=None)
CLAM_AV_DOMAIN = env.str("CLAM_AV_DOMAIN", default=None)
