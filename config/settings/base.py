"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path

import dj_database_url
import environ
import sentry_sdk
from dbt_copilot_python.database import database_url_from_env
from dbt_copilot_python.network import is_copilot, setup_allowed_hosts
from sentry_sdk.integrations.django import DjangoIntegration
from sentry_sdk.integrations.redis import RedisIntegration


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR: Path = Path(__file__).resolve().parent.parent.parent
env: environ.Env = environ.Env()
environ.Env.read_env(BASE_DIR / ".env")

# App
#
APP_ENV: str = env.str("APP_ENV")
GIT_COMMIT: str = env.str("GIT_COMMIT", None)

# Django
# https://docs.djangoproject.com/en/5.1/topics/settings/
SECRET_KEY: str = env.str("SECRET_KEY")
DEBUG: bool = False
ALLOWED_HOSTS: list[str] = setup_allowed_hosts(env.list("ALLOWED_HOSTS", default=[]))
ROOT_URLCONF: str = "config.urls"
WSGI_APPLICATION: str = "config.wsgi.application"

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/
STATIC_URL: str = "static/"

# Vite
# https://vitejs.dev/guide/backend-integration.html
VITE_DEV: bool = env.bool("VITE_DEV")
VITE_DEV_SERVER_URL: str = env.str("VITE_DEV_SERVER_URL")
VITE_MANIFEST_PATH: str = BASE_DIR / "frontend" / "dist" / "manifest.json"

# Application definition
INSTALLED_APPS: list[str] = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.postgres",
    "core.apps.CoreConfig",
]

MIDDLEWARE: list[str] = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

TEMPLATES: list[dict[str]] = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

# Sentry
# https://docs.sentry.io/platforms/python/integrations/django/
SENTRY_DSN: str = env.str("SENTRY_DSN")

if SENTRY_DSN:
    sentry_sdk.init(
        dsn=SENTRY_DSN,
        environment=APP_ENV,
        release=GIT_COMMIT,
        integrations=[DjangoIntegration(), RedisIntegration()],
        enable_tracing=env.bool("SENTRY_ENABLE_TRACING", False),
        traces_sample_rate=env.float("SENTRY_TRACES_SAMPLE_RATE", 0.0),
        send_default_pii=True,
    )


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

if is_copilot():
    DATABASES: dict[str] = {
        "default": dj_database_url.config(
            default=database_url_from_env("DATABASE_CREDENTIALS")
        )
    }
else:
    DATABASE_URL: str = env.str("DATABASE_URL")
    DATABASES: dict[str] = {"default": env.db()}

# Redis
# https://docs.djangoproject.com/en/5.1/topics/cache/
IDENTITY_REDIS_URL: str = env.str("IDENTITY_REDIS_URL", None)
IDENTITY_REDIS: str = env.str("IDENTITY_REDIS", None)

if is_copilot():
    IDENTITY_REDIS_URL = IDENTITY_REDIS_URL
else:
    IDENTITY_REDIS_URL = IDENTITY_REDIS

CACHES: dict[str] = {
    "default": {
        "BACKEND": "django.core.cache.backends.redis.RedisCache",
        "LOCATION": IDENTITY_REDIS_URL,
        "KEY_PREFIX": "wp_",
    }
}

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/
LANGUAGE_CODE: str = "en-gb"
TIME_ZONE: str = "UTC"
USE_I18N: bool = True
USE_TZ: bool = True

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD: str = "django.db.models.BigAutoField"

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS: dict[str, str] = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]
