{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About","text":"<p>Identity is the dedicated service for staff profile and directory information for the Department for Business and Trade (DBT) built using Django.</p> <p>It currently provides no user-facing front end.</p> <p>Identity is currently managed and developed by the Employee Experience Team.</p>"},{"location":"#role-of-the-service","title":"Role of the service","text":"<p>Identity (ID) exists to bring together user information across a variety of products and services in use across the department, many of which do not interface with each other. It does not manage authentication or authorisation.</p> <p>ID is the source of truth for only some of the fields available (generally user-generated data entered via People Finder) but aims to consolidate relevant people data across any service that contains it. Read more about ID's data structures and the APIs used to expose and manage it.</p> <p>ID provides a simple integration point for custom-built services erquiring live people data for staff and users within the department.</p>"},{"location":"#core-concepts","title":"Core concepts","text":""},{"location":"#users-and-profiles","title":"Users and Profiles","text":"<p>To maintain the highest granularity of data, the ID system distinguishes between User and Profile records.</p> <p>Within the ID system, a User represents a single person; other than an identifier and state flags, it holds no other personal information. User records and their state are \"owned\" by Staff SSO (see below).</p> <p>Profile records are the way the ID service maintains (sometimes conflicting) data about a User from different sources. Each data source has its own Profile type and writes only to that type. The ID service maintains a distinct \"combined\" (de-normalised) Profile that represents the most accurate data across all the data sources.</p> <p>Read more in data structures.</p>"},{"location":"#infra-services","title":"\"Infra services\"","text":"<p>Named to follow the AWS ECS naming of \"services\", the ID service will deploy the main application runtime in multiple configurations, each called a \"service\" in AWS ECS.</p> <p>This segmentation allows each service to have a distinct load balancer and network configuration allowing for a defence in depth approach to security.</p> <p>The slightly different configurations used for each of these services will ensure that different APIs may or may not be enabled at all within each of the services; for example the SCIM user management API will only be enabled within the SSO_SCIM infra-service.</p>"},{"location":"#connected-services","title":"Connected services","text":"<p>Staff SSO is the first point of contact for auth across many of the services in the department; it manages user records for all staff and staff-like users as regards their state and permissions.</p> <p>In its integration with ID, Staff SSO \"owns\" User records, their creation, archival and merging, as well as a set of Profile data that arrives into Staff SSO via its other existing integrations.</p> <p>There are hopes to integrate Oracle (the HR data system) and AD/ADD (the Tech IDAM system) and eventually Matrix (the forthcoming HR system) at some point.</p>"},{"location":"#license-information","title":"License information","text":"<p>https://www.svgrepo.com/page/licensing</p>"},{"location":"getting-started/","title":"Getting started","text":""},{"location":"getting-started/#setup","title":"Setup","text":"<p>To get started you will need to copy the example .env file. <pre><code>cp .env.example .env\n</code></pre></p> <p>Afterwards, run the following command to build and start the project: <pre><code>make setup\n</code></pre></p>"},{"location":"getting-started/#build-project-styling","title":"Build project styling","text":"<p>To build the front end styling you will need to run, the command bellow, in a seperate terminal. <pre><code>make vite\n</code></pre></p>"},{"location":"getting-started/#assets","title":"Assets","text":"<p>Assets are handled via vite. A number of npm tasks are provided for development:</p> <ul> <li><code>npm run dev</code> watches the asset folder and recompiles on changes</li> <li><code>npm run build</code> compiles assets once</li> </ul>"},{"location":"updating-dependencies/","title":"Updating dependencies","text":""},{"location":"updating-dependencies/#managing-python-dependencies","title":"Managing Python dependencies","text":"<p>This project uses Poetry for dependency management.</p> <p>We recommend reading through the docs, in particular the sections on the CLI and Dependency specification.</p> <p>Below is an example of how to use Poetry to handle the dependencies in this project.</p> <pre><code># Start a bash session\nmake bash\n# Update all packages (respects the version constraints in pyproject.toml)\npoetry update\n# Update selected packages (respects the version constraints in pyproject.toml)\npoetry update django wagtail\n# Update a package to a version outside it's constraints\npoetry add django@^5.1.0\n</code></pre>"},{"location":"apis/","title":"APIs","text":"<p>The Identity service exposes different APIs for different purposes, split along lines related to different purposes.</p> <p>NB All APIs are self-documenting, at /api/docs, /api/sso/docs, /api/peoplefinder/docs, and /api/scim/docs.</p> <p>The most restricted, highest risk API is for user management and encompasses creation, archiving and merging.</p> <p>The most optimisation-prioritised API is for Staff SSO profile retrieval; this is on the \"hot path\" for the Staff SSO auth process during user authentication.</p> <p>PeopleFinder has a dedicated API since it needs to retrieve and edit a specific provider profile.</p> <p>The most general use API is for most use cases.</p>"},{"location":"apis/#infrastructure-services-and-authentication","title":"Infrastructure \"services\" and authentication","text":"<p>The ID service at runtime will be split into a running \"service\" (in AWS ECS terminology) per API, allowing infrastructure-level security to be applied per API.</p> <p>The ENV var <code>INFRA_SERVICE</code> is used by the runtime code to tell which service it's running under; this is in turn used to load or unload the URLs for a given API, among other things.</p> <p>Hawk/Mohawk key-based header auth is also used to protect every API endpoint; there's a distinct id/key pair per API, also based on the same ENV var.</p>"},{"location":"apis/#direct-documentation","title":"Direct documentation","text":"<p>APIs in the ID service are directly auto-documented by the Django-ninja package.</p> <p>With the right permission levels, if you are able to access an API, you can find HTML documentation on the <code>./docs</code> endpoint; for example if your API is on <code>/api/example</code> the docs would be on <code>/api/example/docs</code>.</p> <p>You will need to be directly user-authenticated on the ID service to access the documentation.</p>"},{"location":"apis/main/","title":"Main","text":"<p>This API is available at <code>/api/</code></p> <p>The ID service exposes an API that provides general functionality.</p>"},{"location":"apis/people-finder/","title":"People Finder","text":"<p>This API is available at <code>/api/peoplefinder/</code></p> <p>The ID service exposes an API that provides read and edit functionality designed for the PeopleFinder / Intranet integration.</p>"},{"location":"apis/people-finder/#api-endpoints","title":"API Endpoints","text":""},{"location":"apis/people-finder/#get-profile","title":"Get Profile:","text":"<p><code>/people/&lt;slug&gt;</code> : returns a minimal peoplefinder profile record</p>"},{"location":"apis/people-finder/#update-profile","title":"Update Profile:","text":"<p><code>/people/&lt;slug&gt;</code> : updates an existing people finder profile and returns a full people finder profile as response</p>"},{"location":"apis/people-finder/#create-profile","title":"Create Profile:","text":"<p><code>/people</code> : creates a new people finder profile and returns a full people finder profile as response</p>"},{"location":"apis/people-finder/#get-teams","title":"Get Teams:","text":"<p><code>/teams</code> : returns all teams in the team hierarchy</p>"},{"location":"apis/people-finder/#get-team","title":"Get Team:","text":"<p><code>/teams/&lt;slug&gt;</code> : returns a team with its parents, including child-parent relationship depth</p>"},{"location":"apis/people-finder/#create-a-team","title":"Create a Team:","text":"<p><code>/teams</code> : creates a new people finder team from the request and returns a minimal team record</p>"},{"location":"apis/people-finder/#update-a-team","title":"Update a Team:","text":"<p><code>/teams/&lt;slug&gt;</code> : updates an existing people finder team using the request data and returns a team response </p>"},{"location":"apis/people-finder/#reference-data-can-be-accessed-via-apipeoplefinderreferenceendpoint-here-is-the-list-of-reference-endpoints","title":"Reference data can be accessed via <code>/api/peoplefinder/reference/&lt;endpoint&gt;</code>. Here is the list of reference endpoints:","text":"<ul> <li><code>countries</code> : list of all countries from the database</li> <li><code>uk_staff_locations</code> : list of all uk staff locations from the database</li> <li><code>remote_working</code> : list of remote working options</li> <li><code>workdays</code> : list of workday options</li> <li><code>learning_interests</code> : list of learning interests</li> <li><code>professions</code> : list of professions</li> <li><code>grades</code> : list of grades</li> <li><code>key_skills</code> : list of key skills</li> <li><code>additional_roles</code> list of additional roles</li> </ul>"},{"location":"apis/sso-profile/","title":"SSO fast profile retrieval","text":"<p>This API is available at <code>/api/sso/</code></p> <p>The ID service exposes an API that provides read-only basic/minimal profile information and nothing else.</p> <p>Because this API's use is on the \"hot path\" of user authentication, and will therefore see high usage and pressure on performance and availability, it is split into its own infra-service: <code>SSO_PROFILE</code>.</p>"},{"location":"apis/user-management/","title":"User management","text":"<p>This API is available at <code>/api/scim/v2/Users</code></p> <p>The ID service exposes a limited SCIM API interface to allow management of Users.</p> <p>Due to the risk this API's exposure carries, it interface is only accessible to the Staff SSO service. Staff SSO directly manages the ID User statuses, and the StaffSSOProfile information via this API.</p> <p>This API is enabled only on the <code>SSO_SCIM</code> infra-service, allowing it to be additionaly protected by netwrok-level protections; i.e. only being accessible via the Staff SSO network.</p>"},{"location":"data-structures/","title":"Data structures","text":"<p>The ID codebase uses Django Apps to isolate and abstract implementation details behind a service layer (Django two scoops terminology).</p> <p>Core deals with whole identities, splitting them into Users and Profiles.</p> <p>The <code>sso_email_id</code> - the Staff SSO system's primary unique identifier - is used by default as the \"id\" across all User and Profile records. All user records are exclusively managed by the Staff SSO service, this gives a unique and consistent means of identification.</p> <p>User records contain only an ID and state / permission flags, all actual user information is stored in Profiles.</p> <p>History is enabled for all User and Profile information, as well as audit logs.</p>"},{"location":"data-structures/profiles/","title":"Profiles","text":"<p>Profiles are the most complex area of the identity service. They hold and manage all the parts of an identity's data that are not related to auth.</p>"},{"location":"data-structures/profiles/#core-concepts","title":"Core concepts","text":"<p>The ID service connects various providers of overlapping user data, and is the source of truth of some but not all of that data.</p> <p>There are a few concepts we're following in the codebase to make sense of all that.</p>"},{"location":"data-structures/profiles/#provider-specific-profiles","title":"Provider-specific Profiles","text":"<p>To account for different providers having different data about the same users, Identity maintains a distinct Profile record for each provider, which holds all the data retrieved from that provider. The idea is that it's always possible to see which data provider has submitted any given information to ID.</p> <p>The <code>StaffSSOProfile</code> record contains <code>first_name</code>, <code>last_name</code>, <code>contact_email</code> and <code>emails</code>.</p> <p>The <code>PeopleFinderProfile</code> record contains many more fields than this, but will also contain a <code>first_name</code> and a <code>last_name</code> field, as well as <code>preferred_name</code>.</p>"},{"location":"data-structures/profiles/#the-combined-profile","title":"The \"combined\" Profile","text":"<p>The provider-specific Profile records maintain data integrity but contain overlapping information, so Identity maintains a \"combined\" <code>Profile</code> record.</p> <p>This combined record is de-normalised (i.e. it only contains duplicates of data held in other profiles) but it represents ID's best effort understanding of the right data for any given field.</p> <p>This Profile should never have data written directly to it; instead it should always have its data generated via the service function, which ensures a consistent approach to hierarchy between overlapping field data.</p>"},{"location":"data-structures/profiles/#emails-teams-and-similar-data","title":"Emails, Teams and similar data","text":"<p>Data such as Email and Team is seen as concrete data needing a representation outside and as well as the providers' differing views. This is to allow us to rationalise about differing providers' understanding of the role of a given email and to get a combined view of all the emails a personn has access to, for example.</p> <p>These are rendered as \"generic\" models, with explicit M2M thrgouh models to the provider-specific Profiles providing context as needed.</p>"},{"location":"data-structures/profiles/#internal-app-structure","title":"Internal app structure","text":"<p>Since there are a lot of models and services in this module, we've further split them into Abstract (non-concrete ancestors of classes), Generic (concrete but non-provider-specific), Specific (e.g. <code>StaffSSOProfile</code>), and Combined (<code>Profile</code>) submodules, which makes it easier to group related models.</p> <p>Note that <code>__init__.py</code> is used at the higher level services module to provide functionality abstracting away these distinctions.</p>"},{"location":"data-structures/users/","title":"Users","text":"<p>The ID service uses a minimal custom Django User extended from <code>AbstractBaseUser</code>. We import the model via <code>django.contrib.auth.get_user_model</code>.</p> <p>It uses <code>sso_email_id</code> as the primary key (so <code>user.pk</code> works but <code>user.id</code> does not).</p> <p>We also use the default flags <code>is_active</code>, <code>is_staff</code> and <code>is_superuser</code> but no other information is stored against the User model; instead all names, emails and other details are stored against the relevant Profile.</p>"}]}