# Generated by Django 5.1.5 on 2025-01-23 13:30

from django.db import migrations, models


GRADES = (
    ("fco_s1", "FCO S1"),
    ("fco_s2", "FCO S2"),
    ("fco_s3", "FCO S3"),
    ("admin_assistant", "Administrative assistant (AA)"),
    ("admin_officer", "Administrative officer (AO/A2)"),
    ("executive_officer", "Executive officer (EO/B3)"),
    ("higher_executive_officer", "Higher executive officer (HEO/C4)"),
    ("senior_executive_officer", "Senior executive officer (SEO/C5)"),
    ("grade_7", "Grade 7 (G7/D6)"),
    ("grade_6", "Grade 6 (G6/D7)"),
    ("scs_1", "Senior civil service 1 (SCS1/SMS1)"),
    ("scs_2", "Senior civil service 2 (SCS2/SMS2)"),
    ("scs_3", "Senior civil service 3 (SCS3/SMS3)"),
    ("scs_4", "Senior civil service 4 (SCS4/SMS4)"),
    ("fast_stream", "Fast Stream"),
    ("fast_track", "Fast Track"),
    ("apprentice", "Apprentice"),
    ("non_graded_special_advisor", "Non graded - special advisor (SPAD)"),
    ("non_graded_contractor", "Non graded - contractor"),
    ("non_graded_secondee", "Non graded - secondee"),
    ("non_graded_post", "Non graded - post"),
)


def insert_grade_data(apps, schema_editor):
    Grade = apps.get_model("profiles", "Grade")

    Grade.objects.bulk_create([Grade(code=code, name=name) for code, name in GRADES])


KEY_SKILLS = (
    ("asset_management", "Asset management"),
    ("assurance", "Assurance"),
    ("benefits_realisation", "Benefits realisation"),
    ("change_management", "Change management"),
    ("coaching", "Coaching"),
    ("commercial_specialist", "Commercial specialist"),
    ("commissioning", "Commissioning"),
    ("contract_management", "Contract management"),
    ("credit_risk_analysis", "Credit risk analysis"),
    ("customer_service", "Customer service"),
    ("digital", " Digital"),
    ("digital_workspace_publisher", "Digital Workspace publisher"),
    ("economist", "Economist"),
    ("financial_reporting", " Financial reporting"),
    ("graphic_design", "Graphic Design"),
    ("hr", "HR"),
    ("income_generation", "Income generation"),
    ("information_management", "Information management"),
    ("interviewing", "Interviewing"),
    ("it", "IT"),
    ("law", "Law"),
    ("lean", "Lean/ Six sigma"),
    ("line_management", "Line management"),
    ("media_trained", "Media trained"),
    ("mentoring", "Mentoring"),
    ("policy_design", "Policy design"),
    ("policy_implementation", "Policy implementation"),
    ("presenting", "Presenting"),
    ("project_delivery", "Project delivery"),
    ("project_management", "Project management"),
    ("property_estates", "Property / Estates"),
    ("research_operational", "Research - operational"),
    ("research_economic", "Research - economic"),
    ("research_statistical", "Research - statistical"),
    ("research_social", "Research - social"),
    ("risk_management", "Risk management"),
    ("security", "Security"),
    ("service_design", "Service and process design"),
    ("skills_and_capability", "Skills and capability management"),
    ("sponsorship", "Sponsorship and partnerships"),
    ("stakeholder_management", "Stakeholder management"),
    ("statistics", "Statistics"),
    ("strategy", "Strategy"),
    ("submission_writing", "Submission writing"),
    ("talent_management", "Talent Management"),
    ("tax", "Tax"),
    ("training", "Training"),
    ("underwriting", "Underwriting"),
    ("user_research", "User research"),
    ("valution", "Valuation"),
    ("working_with_devolved_admin", "Working with Devolved Administrations"),
    ("working_with_ministers", "Working with Ministers"),
    ("working_with_govt_depts", "Working with other government departments"),
)


def insert_key_skills_data(apps, schema_editor):
    KeySkill = apps.get_model("peoplefinder", "KeySkill")

    KeySkill.objects.bulk_create(
        [KeySkill(code=code, name=name) for code, name in KEY_SKILLS]
    )


PROFESSIONS = (
    ("commercial", "Government commercial and contract management"),
    ("corp_finance", "Corporate finance profession"),
    ("counter_fraud", "Counter-fraud standards and profession"),
    ("digital_data_tech", "Digital, data and technology profession"),
    ("gov_comms", "Government communication service"),
    ("gov_economics", "Government economic service"),
    ("gov_finance", "Government finance profession"),
    ("gov_it", "Government IT profession"),
    ("gov_knowledge", "Government knowledge and information management profession"),
    ("gov_legal", "Government legal service"),
    ("gov_occupational", "Government occupational psychology profession"),
    ("gov_operational", "Government operational research service"),
    ("gov_planning_inspectors", "Government planning inspectors"),
    ("gov_planning_profession", "Government planning profession"),
    ("gov_property", "Government property profession"),
    ("gov_security", "Government security profession"),
    ("gov_science", "Government science and engineering profession"),
    ("gov_social", "Government social research profession"),
    ("gov_statistical", "Government statistical service profession"),
    ("gov_tax", "Government tax profession"),
    ("gov_vet", "Government veterinary profession"),
    ("human_resources", "Human resources profession"),
    ("intelligence_analysis", "Intelligence analysis"),
    ("internal_audit", "Internal audit profession"),
    ("medical_profession", "Medical profession"),
    ("operation_delivery", "Operational delivery profession"),
    ("policy_profiession", "Policy profession"),
    ("procurement_profession", "Procurement profession"),
    ("project_delivery", "Project delivery profession"),
    ("international_trade", "International trade profession"),
)


def insert_professions_data(apps, schema_editor):
    Profession = apps.get_model("peoplefinder", "Profession")

    Profession.objects.bulk_create(
        [Profession(code=code, name=name) for code, name in PROFESSIONS]
    )


WORKDAYS = (
    ("mon", "Monday"),
    ("tue", "Tuesday"),
    ("wed", "Wednesday"),
    ("thu", "Thursday"),
    ("fri", "Friday"),
    ("sat", "Saturday"),
    ("sun", "Sunday"),
)


def insert_workday_data(apps, schema_editor):
    Workday = apps.get_model("profiles", "Workday")

    Workday.objects.bulk_create(
        [Workday(code=code, name=name) for code, name in WORKDAYS]
    )


class Migration(migrations.Migration):

    dependencies = [
        ("profiles", "0005_country"),
    ]

    operations = [
        migrations.CreateModel(
            name="Grade",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("code", models.CharField(max_length=30)),
                ("name", models.CharField(max_length=50)),
            ],
            options={
                "ordering": ["name"],
                "constraints": [
                    models.UniqueConstraint(fields=("code",), name="unique_grade_code"),
                    models.UniqueConstraint(fields=("name",), name="unique_grade_name"),
                ],
            },
        ),
        migrations.CreateModel(
            name="KeySkill",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("code", models.CharField(max_length=30)),
                ("name", models.CharField(max_length=50)),
            ],
            options={
                "ordering": ["name"],
                "constraints": [
                    models.UniqueConstraint(
                        fields=("code",), name="unique_key_skill_code"
                    ),
                    models.UniqueConstraint(
                        fields=("name",), name="unique_key_skill_name"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="Profession",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("code", models.CharField(max_length=30)),
                ("name", models.CharField(max_length=60)),
            ],
            options={
                "ordering": ["name"],
                "constraints": [
                    models.UniqueConstraint(
                        fields=("code",), name="unique_profession_code"
                    ),
                    models.UniqueConstraint(
                        fields=("name",), name="unique_profession_name"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="UkStaffLocation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
                ("code", models.CharField(max_length=255, unique=True)),
                ("name", models.CharField(max_length=255)),
                ("city", models.CharField(max_length=255)),
                ("organisation", models.CharField(max_length=255)),
                ("building_name", models.CharField(blank=True, max_length=255)),
            ],
            options={
                "ordering": ["name"],
                "constraints": [
                    models.UniqueConstraint(
                        fields=("code",), name="unique_location_code"
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="Workday",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("code", models.CharField(max_length=3)),
                ("name", models.CharField(max_length=9)),
            ],
            options={
                "constraints": [
                    models.UniqueConstraint(
                        fields=("code",), name="unique_workday_code"
                    ),
                    models.UniqueConstraint(
                        fields=("name",), name="unique_workday_name"
                    ),
                ],
            },
        ),
        migrations.RunPython(insert_grade_data),
        migrations.RunPython(insert_key_skills_data),
        migrations.RunPython(insert_professions_data),
        migrations.RunPython(insert_workday_data),
    ]
